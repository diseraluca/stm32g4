///Register block
#[repr(C)]
pub struct RegisterBlock {
    ///0x00 - FDCAN Core Release Register
    pub crel: CREL,
    ///0x04 - FDCAN Core Release Register
    pub endn: ENDN,
    _reserved2: [u8; 4usize],
    ///0x0c - This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) \[DTSEG1 + DTSEG2 + 3\]
    ///tq or (functional values) \[Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2\]
    ///tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point.
    pub dbtp: DBTP,
    ///0x10 - Write access to the Test Register has to be enabled by setting bit CCCR\[TEST\]
    ///to 1 . All Test Register functions are set to their reset values when bit CCCR\[TEST\]
    ///is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus.
    pub test: TEST,
    ///0x14 - The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD\[WDC\]
    ///bits. The counter is reloaded with RWD\[WDC\]
    ///bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR\[WDI\]
    ///bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock.
    pub rwd: RWD,
    ///0x18 - For details about setting and resetting of single bits see Software initialization.
    pub cccr: CCCR,
    ///0x1c - FDCAN_NBTP
    pub nbtp: NBTP,
    ///0x20 - FDCAN Timestamp Counter Configuration Register
    pub tscc: TSCC,
    ///0x24 - FDCAN Timestamp Counter Value Register
    pub tscv: TSCV,
    ///0x28 - FDCAN Timeout Counter Configuration Register
    pub tocc: TOCC,
    ///0x2c - FDCAN Timeout Counter Value Register
    pub tocv: TOCV,
    _reserved11: [u8; 16usize],
    ///0x40 - FDCAN Error Counter Register
    pub ecr: ECR,
    ///0x44 - FDCAN Protocol Status Register
    pub psr: PSR,
    ///0x48 - FDCAN Transmitter Delay Compensation Register
    pub tdcr: TDCR,
    _reserved14: [u8; 4usize],
    ///0x50 - The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled.
    pub ir: IR,
    ///0x54 - The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line.
    pub ie: IE,
    ///0x58 - The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE\[EINT0\]
    ///and ILE\[EINT1\].
    pub ils: ILS,
    ///0x5c - Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1.
    pub ile: ILE,
    _reserved18: [u8; 32usize],
    ///0x80 - Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path.
    pub rxgfc: RXGFC,
    ///0x84 - FDCAN Extended ID and Mask Register
    pub xidam: XIDAM,
    ///0x88 - This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages.
    pub hpms: HPMS,
    _reserved21: [u8; 4usize],
    ///0x90 - FDCAN Rx FIFO 0 Status Register
    pub rxf0s: RXF0S,
    ///0x94 - CAN Rx FIFO 0 Acknowledge Register
    pub rxf0a: RXF0A,
    ///0x98 - FDCAN Rx FIFO 1 Status Register
    pub rxf1s: RXF1S,
    ///0x9c - FDCAN Rx FIFO 1 Acknowledge Register
    pub rxf1a: RXF1A,
    _reserved25: [u8; 32usize],
    ///0xc0 - FDCAN Tx Buffer Configuration Register
    pub txbc: TXBC,
    ///0xc4 - The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated).
    pub txfqs: TXFQS,
    ///0xc8 - FDCAN Tx Buffer Request Pending Register
    pub txbrp: TXBRP,
    ///0xcc - FDCAN Tx Buffer Add Request Register
    pub txbar: TXBAR,
    ///0xd0 - FDCAN Tx Buffer Cancellation Request Register
    pub txbcr: TXBCR,
    ///0xd4 - FDCAN Tx Buffer Transmission Occurred Register
    pub txbto: TXBTO,
    ///0xd8 - FDCAN Tx Buffer Cancellation Finished Register
    pub txbcf: TXBCF,
    ///0xdc - FDCAN Tx Buffer Transmission Interrupt Enable Register
    pub txbtie: TXBTIE,
    ///0xe0 - FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register
    pub txbcie: TXBCIE,
    ///0xe4 - FDCAN Tx Event FIFO Status Register
    pub txefs: TXEFS,
    ///0xe8 - FDCAN Tx Event FIFO Acknowledge Register
    pub txefa: TXEFA,
    _reserved36: [u8; 20usize],
    ///0x100 - FDCAN CFG clock divider register
    pub ckdiv: CKDIV,
}
///FDCAN Core Release Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [crel](crel) module
pub type CREL = crate::Reg<u32, _CREL>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _CREL;
///`read()` method returns [crel::R](crel::R) reader structure
impl crate::Readable for CREL {}
///FDCAN Core Release Register
pub mod crel;
///FDCAN Core Release Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [endn](endn) module
pub type ENDN = crate::Reg<u32, _ENDN>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _ENDN;
///`read()` method returns [endn::R](endn::R) reader structure
impl crate::Readable for ENDN {}
///FDCAN Core Release Register
pub mod endn;
///This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) \[DTSEG1 + DTSEG2 + 3\]
///tq or (functional values) \[Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2\]
///tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [dbtp](dbtp) module
pub type DBTP = crate::Reg<u32, _DBTP>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _DBTP;
///`read()` method returns [dbtp::R](dbtp::R) reader structure
impl crate::Readable for DBTP {}
///`write(|w| ..)` method takes [dbtp::W](dbtp::W) writer structure
impl crate::Writable for DBTP {}
///This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) \[DTSEG1 + DTSEG2 + 3\]
///tq or (functional values) \[Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2\]
///tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point.
pub mod dbtp;
///Write access to the Test Register has to be enabled by setting bit CCCR\[TEST\]
///to 1 . All Test Register functions are set to their reset values when bit CCCR\[TEST\]
///is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [test](test) module
pub type TEST = crate::Reg<u32, _TEST>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TEST;
///`read()` method returns [test::R](test::R) reader structure
impl crate::Readable for TEST {}
///`write(|w| ..)` method takes [test::W](test::W) writer structure
impl crate::Writable for TEST {}
///Write access to the Test Register has to be enabled by setting bit CCCR\[TEST\]
///to 1 . All Test Register functions are set to their reset values when bit CCCR\[TEST\]
///is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus.
pub mod test;
///The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD\[WDC\]
///bits. The counter is reloaded with RWD\[WDC\]
///bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR\[WDI\]
///bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [rwd](rwd) module
pub type RWD = crate::Reg<u32, _RWD>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _RWD;
///`read()` method returns [rwd::R](rwd::R) reader structure
impl crate::Readable for RWD {}
///`write(|w| ..)` method takes [rwd::W](rwd::W) writer structure
impl crate::Writable for RWD {}
///The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD\[WDC\]
///bits. The counter is reloaded with RWD\[WDC\]
///bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR\[WDI\]
///bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock.
pub mod rwd;
///For details about setting and resetting of single bits see Software initialization.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [cccr](cccr) module
pub type CCCR = crate::Reg<u32, _CCCR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _CCCR;
///`read()` method returns [cccr::R](cccr::R) reader structure
impl crate::Readable for CCCR {}
///`write(|w| ..)` method takes [cccr::W](cccr::W) writer structure
impl crate::Writable for CCCR {}
///For details about setting and resetting of single bits see Software initialization.
pub mod cccr;
///FDCAN_NBTP
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [nbtp](nbtp) module
pub type NBTP = crate::Reg<u32, _NBTP>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _NBTP;
///`read()` method returns [nbtp::R](nbtp::R) reader structure
impl crate::Readable for NBTP {}
///`write(|w| ..)` method takes [nbtp::W](nbtp::W) writer structure
impl crate::Writable for NBTP {}
///FDCAN_NBTP
pub mod nbtp;
///FDCAN Timestamp Counter Configuration Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [tscc](tscc) module
pub type TSCC = crate::Reg<u32, _TSCC>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TSCC;
///`read()` method returns [tscc::R](tscc::R) reader structure
impl crate::Readable for TSCC {}
///`write(|w| ..)` method takes [tscc::W](tscc::W) writer structure
impl crate::Writable for TSCC {}
///FDCAN Timestamp Counter Configuration Register
pub mod tscc;
///FDCAN Timestamp Counter Value Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [tscv](tscv) module
pub type TSCV = crate::Reg<u32, _TSCV>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TSCV;
///`read()` method returns [tscv::R](tscv::R) reader structure
impl crate::Readable for TSCV {}
///FDCAN Timestamp Counter Value Register
pub mod tscv;
///FDCAN Timeout Counter Configuration Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [tocc](tocc) module
pub type TOCC = crate::Reg<u32, _TOCC>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TOCC;
///`read()` method returns [tocc::R](tocc::R) reader structure
impl crate::Readable for TOCC {}
///`write(|w| ..)` method takes [tocc::W](tocc::W) writer structure
impl crate::Writable for TOCC {}
///FDCAN Timeout Counter Configuration Register
pub mod tocc;
///FDCAN Timeout Counter Value Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [tocv](tocv) module
pub type TOCV = crate::Reg<u32, _TOCV>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TOCV;
///`read()` method returns [tocv::R](tocv::R) reader structure
impl crate::Readable for TOCV {}
///FDCAN Timeout Counter Value Register
pub mod tocv;
///FDCAN Error Counter Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [ecr](ecr) module
pub type ECR = crate::Reg<u32, _ECR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _ECR;
///`read()` method returns [ecr::R](ecr::R) reader structure
impl crate::Readable for ECR {}
///FDCAN Error Counter Register
pub mod ecr;
///FDCAN Protocol Status Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [psr](psr) module
pub type PSR = crate::Reg<u32, _PSR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _PSR;
///`read()` method returns [psr::R](psr::R) reader structure
impl crate::Readable for PSR {}
///`write(|w| ..)` method takes [psr::W](psr::W) writer structure
impl crate::Writable for PSR {}
///FDCAN Protocol Status Register
pub mod psr;
///FDCAN Transmitter Delay Compensation Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [tdcr](tdcr) module
pub type TDCR = crate::Reg<u32, _TDCR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TDCR;
///`read()` method returns [tdcr::R](tdcr::R) reader structure
impl crate::Readable for TDCR {}
///`write(|w| ..)` method takes [tdcr::W](tdcr::W) writer structure
impl crate::Writable for TDCR {}
///FDCAN Transmitter Delay Compensation Register
pub mod tdcr;
///The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [ir](ir) module
pub type IR = crate::Reg<u32, _IR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _IR;
///`read()` method returns [ir::R](ir::R) reader structure
impl crate::Readable for IR {}
///`write(|w| ..)` method takes [ir::W](ir::W) writer structure
impl crate::Writable for IR {}
///The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled.
pub mod ir;
///The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [ie](ie) module
pub type IE = crate::Reg<u32, _IE>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _IE;
///`read()` method returns [ie::R](ie::R) reader structure
impl crate::Readable for IE {}
///`write(|w| ..)` method takes [ie::W](ie::W) writer structure
impl crate::Writable for IE {}
///The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line.
pub mod ie;
///The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE\[EINT0\]
///and ILE\[EINT1\].
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [ils](ils) module
pub type ILS = crate::Reg<u32, _ILS>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _ILS;
///`read()` method returns [ils::R](ils::R) reader structure
impl crate::Readable for ILS {}
///`write(|w| ..)` method takes [ils::W](ils::W) writer structure
impl crate::Writable for ILS {}
///The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE\[EINT0\]
///and ILE\[EINT1\].
pub mod ils;
///Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [ile](ile) module
pub type ILE = crate::Reg<u32, _ILE>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _ILE;
///`read()` method returns [ile::R](ile::R) reader structure
impl crate::Readable for ILE {}
///`write(|w| ..)` method takes [ile::W](ile::W) writer structure
impl crate::Writable for ILE {}
///Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1.
pub mod ile;
///Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path.
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [rxgfc](rxgfc) module
pub type RXGFC = crate::Reg<u32, _RXGFC>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _RXGFC;
///`read()` method returns [rxgfc::R](rxgfc::R) reader structure
impl crate::Readable for RXGFC {}
///`write(|w| ..)` method takes [rxgfc::W](rxgfc::W) writer structure
impl crate::Writable for RXGFC {}
///Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path.
pub mod rxgfc;
///FDCAN Extended ID and Mask Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [xidam](xidam) module
pub type XIDAM = crate::Reg<u32, _XIDAM>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _XIDAM;
///`read()` method returns [xidam::R](xidam::R) reader structure
impl crate::Readable for XIDAM {}
///`write(|w| ..)` method takes [xidam::W](xidam::W) writer structure
impl crate::Writable for XIDAM {}
///FDCAN Extended ID and Mask Register
pub mod xidam;
///This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages.
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [hpms](hpms) module
pub type HPMS = crate::Reg<u32, _HPMS>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _HPMS;
///`read()` method returns [hpms::R](hpms::R) reader structure
impl crate::Readable for HPMS {}
///This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages.
pub mod hpms;
///FDCAN Rx FIFO 0 Status Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [rxf0s](rxf0s) module
pub type RXF0S = crate::Reg<u32, _RXF0S>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _RXF0S;
///`read()` method returns [rxf0s::R](rxf0s::R) reader structure
impl crate::Readable for RXF0S {}
///`write(|w| ..)` method takes [rxf0s::W](rxf0s::W) writer structure
impl crate::Writable for RXF0S {}
///FDCAN Rx FIFO 0 Status Register
pub mod rxf0s;
///CAN Rx FIFO 0 Acknowledge Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [rxf0a](rxf0a) module
pub type RXF0A = crate::Reg<u32, _RXF0A>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _RXF0A;
///`read()` method returns [rxf0a::R](rxf0a::R) reader structure
impl crate::Readable for RXF0A {}
///`write(|w| ..)` method takes [rxf0a::W](rxf0a::W) writer structure
impl crate::Writable for RXF0A {}
///CAN Rx FIFO 0 Acknowledge Register
pub mod rxf0a;
///FDCAN Rx FIFO 1 Status Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [rxf1s](rxf1s) module
pub type RXF1S = crate::Reg<u32, _RXF1S>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _RXF1S;
///`read()` method returns [rxf1s::R](rxf1s::R) reader structure
impl crate::Readable for RXF1S {}
///FDCAN Rx FIFO 1 Status Register
pub mod rxf1s;
///FDCAN Rx FIFO 1 Acknowledge Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [rxf1a](rxf1a) module
pub type RXF1A = crate::Reg<u32, _RXF1A>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _RXF1A;
///`read()` method returns [rxf1a::R](rxf1a::R) reader structure
impl crate::Readable for RXF1A {}
///`write(|w| ..)` method takes [rxf1a::W](rxf1a::W) writer structure
impl crate::Writable for RXF1A {}
///FDCAN Rx FIFO 1 Acknowledge Register
pub mod rxf1a;
///FDCAN Tx Buffer Configuration Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbc](txbc) module
pub type TXBC = crate::Reg<u32, _TXBC>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBC;
///`read()` method returns [txbc::R](txbc::R) reader structure
impl crate::Readable for TXBC {}
///`write(|w| ..)` method takes [txbc::W](txbc::W) writer structure
impl crate::Writable for TXBC {}
///FDCAN Tx Buffer Configuration Register
pub mod txbc;
///The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated).
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txfqs](txfqs) module
pub type TXFQS = crate::Reg<u32, _TXFQS>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXFQS;
///`read()` method returns [txfqs::R](txfqs::R) reader structure
impl crate::Readable for TXFQS {}
///The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated).
pub mod txfqs;
///FDCAN Tx Buffer Request Pending Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbrp](txbrp) module
pub type TXBRP = crate::Reg<u32, _TXBRP>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBRP;
///`read()` method returns [txbrp::R](txbrp::R) reader structure
impl crate::Readable for TXBRP {}
///FDCAN Tx Buffer Request Pending Register
pub mod txbrp;
///FDCAN Tx Buffer Add Request Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbar](txbar) module
pub type TXBAR = crate::Reg<u32, _TXBAR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBAR;
///`read()` method returns [txbar::R](txbar::R) reader structure
impl crate::Readable for TXBAR {}
///`write(|w| ..)` method takes [txbar::W](txbar::W) writer structure
impl crate::Writable for TXBAR {}
///FDCAN Tx Buffer Add Request Register
pub mod txbar;
///FDCAN Tx Buffer Cancellation Request Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbcr](txbcr) module
pub type TXBCR = crate::Reg<u32, _TXBCR>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBCR;
///`read()` method returns [txbcr::R](txbcr::R) reader structure
impl crate::Readable for TXBCR {}
///`write(|w| ..)` method takes [txbcr::W](txbcr::W) writer structure
impl crate::Writable for TXBCR {}
///FDCAN Tx Buffer Cancellation Request Register
pub mod txbcr;
///FDCAN Tx Buffer Transmission Occurred Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbto](txbto) module
pub type TXBTO = crate::Reg<u32, _TXBTO>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBTO;
///`read()` method returns [txbto::R](txbto::R) reader structure
impl crate::Readable for TXBTO {}
///FDCAN Tx Buffer Transmission Occurred Register
pub mod txbto;
///FDCAN Tx Buffer Cancellation Finished Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbcf](txbcf) module
pub type TXBCF = crate::Reg<u32, _TXBCF>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBCF;
///`read()` method returns [txbcf::R](txbcf::R) reader structure
impl crate::Readable for TXBCF {}
///FDCAN Tx Buffer Cancellation Finished Register
pub mod txbcf;
///FDCAN Tx Buffer Transmission Interrupt Enable Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbtie](txbtie) module
pub type TXBTIE = crate::Reg<u32, _TXBTIE>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBTIE;
///`read()` method returns [txbtie::R](txbtie::R) reader structure
impl crate::Readable for TXBTIE {}
///`write(|w| ..)` method takes [txbtie::W](txbtie::W) writer structure
impl crate::Writable for TXBTIE {}
///FDCAN Tx Buffer Transmission Interrupt Enable Register
pub mod txbtie;
///FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txbcie](txbcie) module
pub type TXBCIE = crate::Reg<u32, _TXBCIE>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXBCIE;
///`read()` method returns [txbcie::R](txbcie::R) reader structure
impl crate::Readable for TXBCIE {}
///`write(|w| ..)` method takes [txbcie::W](txbcie::W) writer structure
impl crate::Writable for TXBCIE {}
///FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register
pub mod txbcie;
///FDCAN Tx Event FIFO Status Register
///
///This register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txefs](txefs) module
pub type TXEFS = crate::Reg<u32, _TXEFS>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXEFS;
///`read()` method returns [txefs::R](txefs::R) reader structure
impl crate::Readable for TXEFS {}
///FDCAN Tx Event FIFO Status Register
pub mod txefs;
///FDCAN Tx Event FIFO Acknowledge Register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [txefa](txefa) module
pub type TXEFA = crate::Reg<u32, _TXEFA>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _TXEFA;
///`read()` method returns [txefa::R](txefa::R) reader structure
impl crate::Readable for TXEFA {}
///`write(|w| ..)` method takes [txefa::W](txefa::W) writer structure
impl crate::Writable for TXEFA {}
///FDCAN Tx Event FIFO Acknowledge Register
pub mod txefa;
///FDCAN CFG clock divider register
///
///This register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).
///
///For information about available fields see [ckdiv](ckdiv) module
pub type CKDIV = crate::Reg<u32, _CKDIV>;
#[allow(missing_docs)]
#[doc(hidden)]
pub struct _CKDIV;
///`read()` method returns [ckdiv::R](ckdiv::R) reader structure
impl crate::Readable for CKDIV {}
///`write(|w| ..)` method takes [ckdiv::W](ckdiv::W) writer structure
impl crate::Writable for CKDIV {}
///FDCAN CFG clock divider register
pub mod ckdiv;
